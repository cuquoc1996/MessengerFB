//
//  ActiveStatusViewController.swift
//  MessengerFB
//
//  Created by MacBook Pro on 31/07/2025.
//

import UIKit
import SafariServices

class ActiveStatusViewController: UIViewController {
    @IBOutlet weak var note1: UILabel!
    @IBOutlet weak var note2: UILabel!
    @IBOutlet weak var viewBt: UIView!
    @IBOutlet weak var titleLabel: UILabel!
    @IBOutlet weak var toggleSwitch: UISwitch!
    var tappableRange: NSRange!
    override func viewDidLoad() {
        super.viewDidLoad()
        navigationItem.title = "Tr·∫°ng th√°i ho·∫°t ƒë·ªông"
        titleLabel.text = "Hi·ªÉn th·ªã tr·∫°ng th√°i ho·∫°t ƒë·ªông"
        note2.text = "B·∫°n v·∫´n c√≥ th·ªÉ s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa ch√∫ng t√¥i n·∫øu t·∫Øt tr·∫°ng th√°i ho·∫°t ƒë·ªông."
        titleLabel.font = UIFont.systemFont(ofSize: 15)
        viewBt.backgroundColor = .lightGray
        viewBt.layer.cornerRadius = 12
        textContentOn()
        
        // Load tr·∫°ng th√°i c≈©
        let isOn = UserDefaults.standard.bool(forKey: "ActiveStatusEnabled")
        toggleSwitch.isOn = isOn
    }
    
    func textContentOn() {
        let fullText = "B·∫°n b√® v√† c√°c quan h·ªá k·∫øt n·ªëi c√≥ th·ªÉ bi·∫øt khi n√†o b·∫°n ƒëang ho·∫°t ƒë·ªông ho·∫∑c ho·∫°t ƒë·ªông g·∫ßn ƒë√¢y tr√™n trang c√° nh√¢n n√†y. B·∫°n c≈©ng c√≥ th·ªÉ xem th√¥ng tin n√†y v·ªÅ h·ªç. N·∫øu b·∫°n mu·ªën thay ƒë·ªïi c√†i ƒë·∫∑t n√†y th√¨ h√£y t·∫Øt ƒëi m·ªói khi d√πng Messenger ho·∫∑c Facebook ƒë·ªÉ tr·∫°ng th√°i ho·∫°t ƒë·ªông c·ªßa b·∫°n kh√¥ng hi·ªÉn th·ªã n·ªØa. T√¨m hi·ªÉu th√™m"
        let attributedText = NSMutableAttributedString(string: fullText,
                                                       attributes: [
                                                        .font: UIFont(name: "Times New Roman", size: 14)!,
                                                        .foregroundColor: UIColor.label
                                                       ])
        
        // Set style cho ƒëo·∫°n "T√¨m hi·ªÉu th√™m"
        let tappableText = "T√¨m hi·ªÉu th√™m"
        tappableRange = (fullText as NSString).range(of: tappableText)
        attributedText.addAttributes([
            .foregroundColor: UIColor.link,
            .underlineStyle: NSUnderlineStyle.single.rawValue
        ], range: tappableRange)
        
        note1.attributedText = attributedText
        note1.isUserInteractionEnabled = true
        
        // Th√™m gesture tap
        let tapGesture = UITapGestureRecognizer(target: self, action: #selector(handleTapOnLabel(_:)))
        note1.addGestureRecognizer(tapGesture)
    }
    
    func textContentOff() {
        let fullText = "B·∫°n s·∫Ω kh√¥ng bi·∫øt khi n√†o b·∫°n b√® v√† c√°c quan h·ªá k·∫øt n·ªëi ƒëang ho·∫°t ƒë·ªông ho·∫∑c ho·∫°t ƒë·ªông g·∫ßn ƒë√¢y tr√™n ·ª©ng d·ª•ng n√†y. N·∫øu b·∫°n mu·ªën ƒë·∫£m b·∫£o r·∫±ng h·ªç kh√¥ng th·ªÉ xem th√¥ng tin n√†y v·ªÅ b·∫°n, h√£y t·∫Øt c√†i ƒë·∫∑t n√†y m·ªói khi d√πng Messenger ho·∫∑c Facebook ƒë·ªÉ tr·∫°ng th√°i ho·∫°t ƒë·ªông c·ªßa b·∫°n kh√¥ng hi·ªÉn th·ªã n·ªØa. T√¨m hi·ªÉu th√™m"
        let attributedText = NSMutableAttributedString(
            string: fullText,
            attributes: [
                .font: UIFont(name: "Times New Roman", size: 14)!,
                .foregroundColor: UIColor.label
            ]
        )
        
        let tappableText = "T√¨m hi·ªÉu th√™m"
        tappableRange = (fullText as NSString).range(of: tappableText)
        
        attributedText.addAttributes([
            .foregroundColor: UIColor.link,
            .underlineStyle: NSUnderlineStyle.single.rawValue
        ], range: tappableRange)
        
        note1.attributedText = attributedText
        note1.isUserInteractionEnabled = true
        
        let tapGesture = UITapGestureRecognizer(target: self, action: #selector(handleTapOnLabel(_:)))
        note1.addGestureRecognizer(tapGesture)
    }
    
    @objc func handleTapOnLabel(_ gesture: UITapGestureRecognizer) {
        guard let label = gesture.view as? UILabel,
              let attributedText = label.attributedText else { return }
        
        // Setup ƒë·ªÉ t√≠nh v·ªã tr√≠ k√Ω t·ª±
        let layoutManager = NSLayoutManager()
        let textContainer = NSTextContainer(size: .zero) // ban ƒë·∫ßu .zero
        let textStorage = NSTextStorage(attributedString: attributedText)
        
        layoutManager.addTextContainer(textContainer)
        textStorage.addLayoutManager(layoutManager)
        
        textContainer.lineFragmentPadding = 0
        textContainer.lineBreakMode = label.lineBreakMode
        textContainer.maximumNumberOfLines = label.numberOfLines
        textContainer.size = CGSize(width: label.bounds.width, height: .greatestFiniteMagnitude) // ‚úÖ ƒë√∫ng width c·ªßa label
        
        let location = gesture.location(in: label)
        let index = layoutManager.characterIndex(
            for: location,
            in: textContainer,
            fractionOfDistanceBetweenInsertionPoints: nil
        )
        
        // ‚úÖ N·∫øu tap trong v√πng hyperlink ‚Üí push WebViewController
        if tappableRange.contains(index) {
            print("Tap v√†o k√Ω t·ª± cu·ªëi c√πng")
            openLink("https://www.apple.com")
        } else {
            print("Tap v√†o k√Ω t·ª± kh√°c")
        }
    }
    
    func openLink(_ urlString: String) {
        guard let url = URL(string: urlString) else { return }
        let safariVC = SFSafariViewController(url: url)
        present(safariVC, animated: true)
    }
    
    @IBAction func switchChanged(_ sender: UISwitch) {
        UserDefaults.standard.set(sender.isOn, forKey: "ActiveStatusEnabled")
        print("ƒê√£ nh·∫•n: \(sender.isOn)")
        if sender.isOn {
            self.textContentOn()
            // N·∫øu b·∫≠t l∆∞u lu√¥n
            UserDefaults.standard.set(true, forKey: "ActiveStatusEnabled")
        } else {
            let alert = UIAlertController(
                title: "T·∫Øt tr·∫°ng th√°i ho·∫°t ƒë·ªông?",
                message: "B·∫°n s·∫Ω kh√¥ng bi·∫øt khi b·∫°n b√® v√† c√°c quan h·ªá k·∫øt n·ªëi c·ªßa m√¨nh ƒëang ho·∫°t ƒë·ªông, ho·∫°t ƒë·ªông g·∫ßn ƒë√¢y ho·∫∑c tham gia c√πng ƒëo·∫°n chat v·ªõi b·∫°n.",
                preferredStyle: .alert)
            alert.addAction(UIAlertAction(title: "Hu·ª∑", style: .default) {_ in
                // Gi·ªØ nguy√™n b·∫≠t
                sender.setOn(true, animated: true)
                // üîë Fix: ƒë·ªìng b·ªô l·∫°i UserDefaults v·ªÅ true
                UserDefaults.standard.set(true, forKey: "ActiveStatusEnabled")
                self.textContentOn()
            })
            alert.addAction(UIAlertAction(title: "T·∫Øt", style: .destructive) {_ in
                self.textContentOff()
                // X√°c nh·∫≠n t·∫Øt
                UserDefaults.standard.set(false, forKey: "ActiveStatusEnabled")
            })
            present(alert, animated: true)
        }
    }
}

